stan_trace(samples_wb1, pars = c("beta", "sigmasq", "tausq", "phi", "w_b1[1]",
"w_b1[2]", "w_b1[3]", "w_b1[4]"))
options(mc.cores = parallel::detectCores())
data <- list(N = N, M = M, P = P,
Y = Y[NN.matrix$ord], X = X[NN.matrix$ord, ],
NN_ind = NN.matrix$NN_ind, NN_dist = NN.matrix$NN_dist,
NN_distM = NN.matrix$NN_distM,
uB = uB, VB = VB, ss = ss, st = st, ap = ap, bp = bp)
myinits <-list(list(beta = c(1, 5), sigma = 1, tau = 0.5, phi = 20,
w_b1 = rep(0, N)),
list(beta = c(5, 5), sigma = 1.5, tau = 0.2, phi = 5,
w_b1 = rep(0.1, N)),
list(beta = c(0, 0), sigma = 2.5, tau = 0.1, phi = 9 ,
w_b1 = rep(0, N)))
parameters <- c("beta", "sigmasq", "tausq", "phi", "w")
samples_w <- stan(
file = "nngp_random.stan",
data = data,
init = myinits,
pars = parameters,
iter = 600,
chains = 3,
thin = 1,
seed = 123
)
print(samples_w, pars = c("beta", "sigmasq", "tausq", "phi", "w[1]",
"w[2]", "w[3]", "w[4]"))
stan_trace(samples_w, inc_warmup = T,
pars = c("beta", "sigmasq", "tausq", "phi", "w[1]",
"w[2]", "w[3]", "w[4]"))
stan_trace(samples_w, pars = c("beta", "sigmasq", "tausq", "phi", "w[1]",
"w[2]", "w[3]", "w[4]"))
ss = 3 * sqrt(2)
3 * sqrt(2)
setwd("/Users/luzhang/Documents/github/NNGP_STAN")
rm(list = ls())
library(rstan)
library(shinystan)
library(spNNGP)       # Build neighbor index
source("NNmatrix.R")  # Build matrix including nearest neighbor information
rmvn <- function(N, mu = 0, V = matrix(1)){
P <- length(mu)
if(any(is.na(match(dim(V), P))))
stop("Dimension problem!")
D <- chol(V)
t(matrix(rnorm(N * P), ncol = P) %*% D + rep(mu, rep(N, P)))
}
set.seed(1234)
N <- 500
coords <- cbind(runif(N), runif(N))
X <- as.matrix(cbind(1, rnorm(N)))
B <- as.matrix(c(1, 5))
sigma.sq <- 2
tau.sq <- 0.1
phi <- 3 / 0.5
D <- as.matrix(dist(coords))
R <- exp(- phi * D)
w <- rmvn(1, rep(0, N), sigma.sq*R)
Y <- rnorm(N, X %*% B + w, sqrt(tau.sq))
M = 6                 # Number of Nearest Neighbors
NN.matrix <- NNMatrix(coords = coords, n.neighbors = M, n.omp.threads = 2)
str(NN.matrix)
par(mfrow=c(1,1))
Check_Neighbors(NN.matrix$coords.ord, n.neighbors = M, NN.matrix, ind = 200)
P = 1                  # number of regression coefficients
uB = rep(0, P + 1)     # mean vector in the Gaussian prior of beta
VB = diag(P + 1)*1000  # covariance matrix in the Gaussian prior of beta
ss = 3 * sqrt(2)       # scale parameter in the normal prior of sigma
st = 3 * sqrt(0.1)     # scale parameter in the normal prior of tau
ap = 6; bp = 1         # shape and rate parameter in the Gamma prior of phi
options(mc.cores = parallel::detectCores())
data <- list(N = N, M = M, P = P,
Y = Y[NN.matrix$ord], X = X[NN.matrix$ord, ],
NN_ind = NN.matrix$NN_ind, NN_dist = NN.matrix$NN_dist,
NN_distM = NN.matrix$NN_distM,
uB = uB, VB = VB,ss = ss, st = st, ap = ap, bp = bp)
myinits <-list(list(beta = c(1, 5), sigma = 1, tau = 0.4, phi = 20),
list(beta = c(5, 5), sigma = 1.5, tau = 0.2, phi = 5),
list(beta = c(0, 0), sigma = 2.5, tau = 0.1, phi = 9))
parameters <- c("beta", "sigmasq", "tausq", "phi")
samples <- stan(
file = "nngp_response.stan",
data = data,
init = myinits,
pars = parameters,
iter = 400,
chains = 3,
thin = 1,
seed = 123
)
print(samples)
stan_trace(samples)
x <- seq(0.1, 20, by = 0.1)
x
y <- dgamma(x)
?dgamma
y <- dgamma(x, shape = 6, rate = 1)
plot(x, y)
y <- dgamma(x, shape = 6, rate = 0.5)
plot(x, y)
y <- dgamma(x, shape = 6, rate = 1)
plot(x, y)
y <- dgamma(x, shape = 3, rate = 0.5)
plot(x, y)
y2 <- dgamma(x, shape = 6, rate = 1)
plot(x, y2)
P = 1                  # number of regression coefficients
uB = rep(0, P + 1)     # mean vector in the Gaussian prior of beta
VB = diag(P + 1)*1000  # covariance matrix in the Gaussian prior of beta
ss = 3 * sqrt(2)       # scale parameter in the normal prior of sigma
st = 3 * sqrt(0.1)     # scale parameter in the normal prior of tau
ap = 3; bp = 0.5       # shape and rate parameters in the Gamma prior of phi
options(mc.cores = parallel::detectCores())
data <- list(N = N, M = M, P = P,
Y = Y[NN.matrix$ord], X = X[NN.matrix$ord, ],
NN_ind = NN.matrix$NN_ind, NN_dist = NN.matrix$NN_dist,
NN_distM = NN.matrix$NN_distM,
uB = uB, VB = VB,ss = ss, st = st, ap = ap, bp = bp)
myinits <-list(list(beta = c(1, 5), sigma = 1, tau = 0.4, phi = 20),
list(beta = c(5, 5), sigma = 1.5, tau = 0.2, phi = 5),
list(beta = c(0, 0), sigma = 2.5, tau = 0.1, phi = 9))
parameters <- c("beta", "sigmasq", "tausq", "phi")
samples <- stan(
file = "nngp_response.stan",
data = data,
init = myinits,
pars = parameters,
iter = 400,
chains = 3,
thin = 1,
seed = 123
)
print(samples)
stan_trace(samples)
stan_trace(samples, inc_warmup = T)
P = 1                  # number of regression coefficients
uB = rep(0, P + 1)     # mean vector in the Gaussian prior of beta
VB = diag(P + 1)*1000  # covariance matrix in the Gaussian prior of beta
ss = 3 * sqrt(2)       # scale parameter in the normal prior of sigma
st = 3 * sqrt(0.1)     # scale parameter in the normal prior of tau
ap = 3; bp = 0.5       # shape and rate parameters in the Gamma prior of phi
options(mc.cores = parallel::detectCores())
data <- list(N = N, M = M, P = P,
Y = Y[NN.matrix$ord], X = X[NN.matrix$ord, ],
NN_ind = NN.matrix$NN_ind, NN_dist = NN.matrix$NN_dist,
NN_distM = NN.matrix$NN_distM,
uB = uB, VB = VB,ss = ss, st = st, ap = ap, bp = bp)
myinits <-list(list(beta = c(1, 5), sigma = 1, tau = 0.4, phi = 15),
list(beta = c(5, 5), sigma = 1.5, tau = 0.2, phi = 5),
list(beta = c(0, 0), sigma = 2.5, tau = 0.1, phi = 9))
parameters <- c("beta", "sigmasq", "tausq", "phi")
samples <- stan(
file = "nngp_response.stan",
data = data,
init = myinits,
pars = parameters,
iter = 600,
chains = 3,
thin = 1,
seed = 123
)
print(samples)
stan_trace(samples)
stan_trace(samples, inc_warmup = T)
stan_trace(samples)
plot(x, y)
x
y <- gamma(x, shape = 2, rate = 0.3)
y <- dgamma(x, shape = 2, rate = 0.3)
plot(x, y)
plot(x, y2)
2/0.3
2/0.3^2
P = 1                  # number of regression coefficients
uB = rep(0, P + 1)     # mean vector in the Gaussian prior of beta
VB = diag(P + 1)*1000  # covariance matrix in the Gaussian prior of beta
ss = 3 * sqrt(2)       # scale parameter in the normal prior of sigma
st = 3 * sqrt(0.1)     # scale parameter in the normal prior of tau
ap = 3; bp = 0.5       # shape and rate parameters in the Gamma prior of phi
options(mc.cores = parallel::detectCores())
data <- list(N = N, M = M, P = P,
Y = Y[NN.matrix$ord], X = X[NN.matrix$ord, ],
NN_ind = NN.matrix$NN_ind, NN_dist = NN.matrix$NN_dist,
NN_distM = NN.matrix$NN_distM,
uB = uB, VB = VB,ss = ss, st = st, ap = ap, bp = bp)
myinits <-list(list(beta = c(1, 5), sigma = 1, tau = 0.4, phi = 12),
list(beta = c(5, 5), sigma = 1.5, tau = 0.2, phi = 5),
list(beta = c(0, 0), sigma = 2.5, tau = 0.1, phi = 9))
parameters <- c("beta", "sigmasq", "tausq", "phi")
samples <- stan(
file = "nngp_response.stan",
data = data,
init = myinits,
pars = parameters,
iter = 400,
chains = 3,
thin = 1,
seed = 123
)
print(samples)
print(samples)
stan_trace(samples)
stan_trace(samples, inc_warmup = T)
options(mc.cores = parallel::detectCores())
data <- list(N = N, M = M, P = P,
Y = Y[NN.matrix$ord], X = X[NN.matrix$ord, ],
NN_ind = NN.matrix$NN_ind, NN_dist = NN.matrix$NN_dist,
NN_distM = NN.matrix$NN_distM,
uB = uB, VB = VB,ss = ss, st = st, ap = ap, bp = bp)
myinits <-list(list(beta = c(1, 5), sigma = 1, tau = 0.4, phi = 12),
list(beta = c(5, 5), sigma = 1.5, tau = 0.2, phi = 4),
list(beta = c(0, 0), sigma = 2.5, tau = 0.1, phi = 9))
parameters <- c("beta", "sigmasq", "tausq", "phi")
samples <- stan(
file = "nngp_response.stan",
data = data,
init = myinits,
pars = parameters,
iter = 400,
chains = 3,
thin = 1,
seed = 123
)
print(samples)
stan_trace(samples)
P = 1                  # number of regression coefficients
uB = rep(0, P + 1)     # mean vector in the Gaussian prior of beta
VB = diag(P + 1)*1000  # covariance matrix in the Gaussian prior of beta
ss = 3 * sqrt(2)       # scale parameter in the normal prior of sigma
st = 3 * sqrt(0.1)     # scale parameter in the normal prior of tau
ap = 3; bp = 0.5       # shape and rate parameters in the Gamma prior of phi
options(mc.cores = parallel::detectCores())
data <- list(N = N, M = M, P = P,
Y = Y[NN.matrix$ord], X = X[NN.matrix$ord, ],
NN_ind = NN.matrix$NN_ind, NN_dist = NN.matrix$NN_dist,
NN_distM = NN.matrix$NN_distM,
uB = uB, VB = VB,ss = ss, st = st, ap = ap, bp = bp)
myinits <-list(list(beta = c(1, 5), sigma = 1, tau = 0.4, phi = 16),
list(beta = c(5, 5), sigma = 1.5, tau = 0.2, phi = 3),
list(beta = c(0, 0), sigma = 2.5, tau = 0.1, phi = 9))
parameters <- c("beta", "sigmasq", "tausq", "phi")
samples <- stan(
file = "nngp_response.stan",
data = data,
init = myinits,
pars = parameters,
iter = 400,
chains = 3,
thin = 1,
seed = 123
)
print(samples)
stan_trace(samples)
ny <- dnorm(x, 0, 3*sqrt(2))
plot(x, y)
plot(x, ny)
myinits <-list(list(beta = c(1, 5), sigma = 1, tau = 0.4, phi = 13),
list(beta = c(5, 5), sigma = 1.5, tau = 0.2, phi = 3),
list(beta = c(0, 0), sigma = 2.5, tau = 0.1, phi = 9))
parameters <- c("beta", "sigmasq", "tausq", "phi")
samples <- stan(
file = "nngp_response.stan",
data = data,
init = myinits,
pars = parameters,
iter = 400,
chains = 3,
thin = 1,
seed = 123
)
print(samples)
stan_trace(samples)
myinits <-list(list(beta = c(1, 5), sigma = 1, tau = 0.4, phi = 12),
list(beta = c(5, 5), sigma = 1.5, tau = 0.2, phi = 3),
list(beta = c(0, 0), sigma = 2.5, tau = 0.1, phi = 9))
parameters <- c("beta", "sigmasq", "tausq", "phi")
samples <- stan(
file = "nngp_response.stan",
data = data,
init = myinits,
pars = parameters,
iter = 400,
chains = 3,
thin = 1,
seed = 123
)
print(samples)
print(samples)
stan_trace(samples)
stan_trace(samples, inc_warmup = T)
options(mc.cores = parallel::detectCores())
data <- list(N = N, M = M, P = P,
Y = Y[NN.matrix$ord], X = X[NN.matrix$ord, ],
NN_ind = NN.matrix$NN_ind, NN_dist = NN.matrix$NN_dist,
NN_distM = NN.matrix$NN_distM,
uB = uB, VB = VB,ss = ss, st = st, ap = ap, bp = bp)
myinits <-list(list(beta = c(1, 5), sigma = 1, tau = 0.4, phi = 12),
list(beta = c(5, 5), sigma = 1.5, tau = 0.2, phi = 3),
list(beta = c(0, 0), sigma = 2.5, tau = 0.1, phi = 9))
parameters <- c("beta", "sigmasq", "tausq", "phi")
samples <- stan(
file = "nngp_response.stan",
data = data,
init = myinits,
pars = parameters,
iter = 600,
chains = 3,
thin = 1,
seed = 123
)
print(samples)
stan_trace(samples)
myinits <-list(list(beta = c(1, 1), sigma = 1, tau = 0.4, phi = 12),
list(beta = c(5, 5), sigma = 1.5, tau = 0.2, phi = 3),
list(beta = c(0, 0), sigma = 2.5, tau = 0.1, phi = 9))
parameters <- c("beta", "sigmasq", "tausq", "phi")
samples <- stan(
file = "nngp_response.stan",
data = data,
init = myinits,
pars = parameters,
iter = 600,
chains = 3,
thin = 1,
seed = 123
)
print(samples)
myinits <-list(list(beta = c(1, 5), sigma = 1, tau = 0.5, phi = 12),
list(beta = c(5, 5), sigma = 1.5, tau = 0.2, phi = 3),
list(beta = c(0, 0), sigma = 2.5, tau = 0.1, phi = 9))
parameters <- c("beta", "sigmasq", "tausq", "phi")
samples <- stan(
file = "nngp_response.stan",
data = data,
init = myinits,
pars = parameters,
iter = 400,
chains = 3,
thin = 1,
seed = 123
)
print(samples)
stan_trace(samples)
stan_trace(samples, inc_warmup = T)
stan_trace(samples)
parameters <- c("beta", "sigmasq", "tausq", "phi")
samples <- stan(
file = "nngp_response.stan",
data = data,
init = myinits,
pars = parameters,
iter = 600,
chains = 3,
thin = 1,
seed = 123
)
print(samples)
stan_trace(samples)
stan_trace(samples, inc_warmup = T)
sampler_params <- get_sampler_params(samples, inc_warmup = FALSE)
mean_accept_stat_by_chain <-
sapply(sampler_params, function(x) mean(x[, "accept_stat__"]))
print(mean_accept_stat_by_chain)
options(mc.cores = parallel::detectCores())
data <- list(N = N, M = M, P = P,
Y = Y[NN.matrix$ord], X = X[NN.matrix$ord, ],
NN_ind = NN.matrix$NN_ind, NN_dist = NN.matrix$NN_dist,
NN_distM = NN.matrix$NN_distM,
uB = uB, VB = VB, ss = ss, st = st, ap = ap, bp = bp)
myinits <-list(list(beta = c(1, 5), sigma = 1, tau = 0.5, phi = 12,
w_b1 = rep(0, N)),
list(beta = c(5, 5), sigma = 1.5, tau = 0.2, phi = 5,
w_b1 = rep(0.1, N)),
list(beta = c(0, 0), sigma = 2.5, tau = 0.1, phi = 9 ,
w_b1 = rep(0, N)))
parameters <- c("beta", "sigmasq", "tausq", "phi", "w")
samples_w <- stan(
file = "nngp_random.stan",
data = data,
init = myinits,
pars = parameters,
iter = 600,
chains = 3,
thin = 1,
seed = 123
)
print(samples_w, pars = c("beta", "sigmasq", "tausq", "phi", "w[1]",
"w[2]", "w[3]", "w[4]"))
stan_trace(samples_w, pars = c("beta", "sigmasq", "tausq", "phi", "w[1]",
"w[2]", "w[3]", "w[4]"))
options(mc.cores = parallel::detectCores())
data <- list(N = N, M = M, P = P,
Y = Y[NN.matrix$ord], X = X[NN.matrix$ord, ],
NN_ind = NN.matrix$NN_ind, NN_dist = NN.matrix$NN_dist,
NN_distM = NN.matrix$NN_distM,
uB = uB, VB = VB, ss = ss, st = st, ap = ap, bp = bp)
myinits <-list(list(beta = c(1, 5), sigma = 1, tau = 0.5, phi = 12,
w_b1 = rep(0, N)),
list(beta = c(5, 5), sigma = 1.5, tau = 0.2, phi = 5,
w_b1 = rep(0.1, N)),
list(beta = c(0, 0), sigma = 2.5, tau = 0.1, phi = 9 ,
w_b1 = rep(0, N)))
parameters <- c("beta", "sigmasq", "tausq", "phi", "w_b1")
samples_wb1 <- stan(
file = "nngp_random_b1.stan",
data = data,
init = myinits,
pars = parameters,
iter = 600,
chains = 3,
thin = 1,
seed = 123
)
print(samples_wb1, pars = c("beta", "sigmasq", "tausq", "phi", "w_b1[1]",
"w_b1[2]", "w_b1[3]", "w_b1[4]"))
stan_trace(samples_wb1, pars = c("beta", "sigmasq", "tausq", "phi", "w_b1[1]",
"w_b1[2]", "w_b1[3]", "w_b1[4]"))
print(samples_w, pars = c("beta", "sigmasq", "tausq", "phi", "w[1]",
"w[2]", "w[3]", "w[4]"))
stan_trace(samples_w, pars = c("beta", "sigmasq", "tausq", "phi", "w[1]",
"w[2]", "w[3]", "w[4]"))
print(samples_wb1, pars = c("beta", "sigmasq", "tausq", "phi", "w_b1[1]",
"w_b1[2]", "w_b1[3]", "w_b1[4]"))
stan_trace(samples_wb1, pars = c("beta", "sigmasq", "tausq", "phi", "w_b1[1]",
"w_b1[2]", "w_b1[3]", "w_b1[4]"))
stan_trace(samples_wb1, pars = c("beta", "sigmasq", "tausq", "phi", "w_b1[1]",
"w_b1[2]", "w_b1[3]", "w_b1[4]"),
inc_warmup = T)
myinits <-list(list(beta = c(1, 5), sigma = 1, tau = 0.5, phi = 20),
list(beta = c(5, 5), sigma = 1.5, tau = 0.2, phi = 3),
list(beta = c(0, 0), sigma = 2.5, tau = 0.1, phi = 9))
myinits <-list(list(beta = c(1, 5), sigma = 1, tau = 0.5, phi = 20),
list(beta = c(5, 5), sigma = 1.5, tau = 0.2, phi = 3),
list(beta = c(0, 0), sigma = 2.5, tau = 0.1, phi = 9))
P = 1                  # number of regression coefficients
uB = rep(0, P + 1)     # mean vector in the Gaussian prior of beta
VB = diag(P + 1)*1000  # covariance matrix in the Gaussian prior of beta
ss = 3 * sqrt(2)       # scale parameter in the normal prior of sigma
st = 3 * sqrt(0.1)     # scale parameter in the normal prior of tau
ap = 3; bp = 0.5       # shape and rate parameters in the Gamma prior of phi
options(mc.cores = parallel::detectCores())
data <- list(N = N, M = M, P = P,
Y = Y[NN.matrix$ord], X = X[NN.matrix$ord, ],
NN_ind = NN.matrix$NN_ind, NN_dist = NN.matrix$NN_dist,
NN_distM = NN.matrix$NN_distM,
uB = uB, VB = VB,ss = ss, st = st, ap = ap, bp = bp)
myinits <-list(list(beta = c(1, 5), sigma = 1, tau = 0.5, phi = 20),
list(beta = c(5, 5), sigma = 1.5, tau = 0.2, phi = 3),
list(beta = c(0, 0), sigma = 2.5, tau = 0.1, phi = 9))
parameters <- c("beta", "sigmasq", "tausq", "phi")
samples <- stan(
file = "nngp_response.stan",
data = data,
init = myinits,
pars = parameters,
iter = 600,
chains = 3,
thin = 1,
seed = 123
)
print(samples)
stan_trace(samples)
stan_trace(samples, inc_warmup = T)
print(samples)
options(mc.cores = parallel::detectCores())
data <- list(N = N, M = M, P = P,
Y = Y[NN.matrix$ord], X = X[NN.matrix$ord, ],
NN_ind = NN.matrix$NN_ind, NN_dist = NN.matrix$NN_dist,
NN_distM = NN.matrix$NN_distM,
uB = uB, VB = VB,ss = ss, st = st, ap = ap, bp = bp)
myinits <-list(list(beta = c(1, 5), sigma = 1, tau = 0.5, phi = 20),
list(beta = c(5, 5), sigma = 1.5, tau = 0.2, phi = 3),
list(beta = c(0, 0), sigma = 2.5, tau = 0.1, phi = 9))
parameters <- c("beta", "sigmasq", "tausq", "phi")
samples <- stan(
file = "nngp_response.stan",
data = data,
init = myinits,
pars = parameters,
iter = 400,
chains = 3,
thin = 1,
seed = 123
)
print(samples)
options(mc.cores = parallel::detectCores())
data <- list(N = N, M = M, P = P,
Y = Y[NN.matrix$ord], X = X[NN.matrix$ord, ],
NN_ind = NN.matrix$NN_ind, NN_dist = NN.matrix$NN_dist,
NN_distM = NN.matrix$NN_distM,
uB = uB, VB = VB, ss = ss, st = st, ap = ap, bp = bp)
myinits <-list(list(beta = c(1, 5), sigma = 1, tau = 0.5, phi = 20,
w_b1 = rep(0, N)),
list(beta = c(5, 5), sigma = 1.5, tau = 0.2, phi = 5,
w_b1 = rep(0.1, N)),
list(beta = c(0, 0), sigma = 2.5, tau = 0.1, phi = 9 ,
w_b1 = rep(0, N)))
parameters <- c("beta", "sigmasq", "tausq", "phi", "w_b1")
samples_wb1 <- stan(
file = "nngp_random_b1.stan",
data = data,
init = myinits,
pars = parameters,
iter = 600,
chains = 3,
thin = 1,
seed = 123
)
print(samples_wb1, pars = c("beta", "sigmasq", "tausq", "phi", "w_b1[1]",
"w_b1[2]", "w_b1[3]", "w_b1[4]"))
stan_trace(samples_wb1, pars = c("beta", "sigmasq", "tausq", "phi", "w_b1[1]",
"w_b1[2]", "w_b1[3]", "w_b1[4]"))
